rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read/write their own profile
    // An admin can read/write any user's profile
    match /users/{userId} {
      allow read, write: if request.auth != null && (request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');

      // Nested addresses subcollection - users can manage their own addresses
      match /addresses/{addressId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Anyone can read categories and products
    // Only admins can write to categories and products
    match /categories/{document} {
      allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /products/{document} {
      allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Users can read/write their own orders
    match /orders/{orderId} {
      // Allow reads if the authenticated user is the owner or an admin
      allow read: if request.auth != null && (
        // Owner can read
        request.auth.uid == resource.data.userId
        // Admins (users document role == 'admin') can read any order
        || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );

      // Creation allowed only by authenticated users creating their own order
      allow create: if request.auth != null &&
                       request.auth.uid == request.resource.data.userId;

      // Updates and deletes allowed by owner or admin
      allow update, delete: if request.auth != null && (
        request.auth.uid == resource.data.userId
        || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
    }

    // ‚≠ê ADDRESSES - Users can only read/write their own addresses
    match /addresses/{addressId} {
      allow read: if request.auth != null &&
                     request.auth.uid == resource.data.userId;
      allow create: if request.auth != null &&
                       request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null &&
                               request.auth.uid == resource.data.userId;
    }

    // Users can read/write their own cart
    match /cart/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Cart items subcollection
    match /cart/{userId}/items/{itemId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Users can read/write their own wishlist
    match /wishlist/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Wishlist items subcollection
    match /wishlist/{userId}/items/{itemId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Users can read their own notifications
    match /notifications/{notificationId} {
      allow read: if request.auth != null &&
                     request.auth.uid == resource.data.userId;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null &&
                               request.auth.uid == resource.data.userId;
    }
  }
}

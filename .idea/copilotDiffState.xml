<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/grocerygo/AddressBookActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/grocerygo/AddressBookActivity.java" />
              <option name="originalContent" value="package com.grocerygo;&#10;&#10;import android.app.AlertDialog;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.ImageView;&#10;import android.widget.LinearLayout;&#10;import android.widget.ProgressBar;&#10;import android.widget.RadioButton;&#10;import android.widget.RadioGroup;&#10;import android.widget.Spinner;&#10;import android.widget.ArrayAdapter;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.cardview.widget.CardView;&#10;import androidx.core.app.ActivityCompat;&#10;import androidx.core.content.ContextCompat;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.google.android.gms.location.FusedLocationProviderClient;&#10;import com.google.android.gms.location.LocationServices;&#10;import com.google.android.gms.tasks.OnSuccessListener;&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.QueryDocumentSnapshot;&#10;import com.grocerygo.app.R;&#10;import com.grocerygo.models.Address;&#10;&#10;import org.json.JSONArray;&#10;import org.json.JSONObject;&#10;&#10;import java.io.BufferedReader;&#10;import java.io.InputStream;&#10;import java.io.InputStreamReader;&#10;import java.net.HttpURLConnection;&#10;import java.net.URL;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;import android.location.Location;&#10;import android.Manifest;&#10;import android.content.pm.PackageManager;&#10;&#10;public class AddressBookActivity extends AppCompatActivity {&#10;    private RecyclerView rvAddresses;&#10;    private AddressAdapter addressAdapter;&#10;    private List&lt;Address&gt; addressList;&#10;    private FloatingActionButton fabAddAddress;&#10;    private ProgressBar progressBar;&#10;    private LinearLayout llEmptyState;&#10;    private ImageView btnBack;&#10;&#10;    private FirebaseFirestore db;&#10;    private FirebaseAuth auth;&#10;    private String userId;&#10;&#10;    // Location client&#10;    private FusedLocationProviderClient fusedLocationClient;&#10;    private static final int REQUEST_LOCATION_PERMISSION = 1001;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        try {&#10;            setContentView(R.layout.activity_address_book);&#10;&#10;            db = FirebaseFirestore.getInstance();&#10;            auth = FirebaseAuth.getInstance();&#10;            userId = auth.getCurrentUser() != null ? auth.getCurrentUser().getUid() : &quot;&quot;;&#10;&#10;            fusedLocationClient = LocationServices.getFusedLocationProviderClient(this);&#10;&#10;            initViews();&#10;            setupRecyclerView();&#10;            loadAddresses();&#10;        } catch (Exception e) {&#10;            // Log and avoid crashing the launcher activity&#10;            android.util.Log.e(&quot;AddressBook&quot;, &quot;Error in onCreate - failing gracefully&quot;, e);&#10;            runOnUiThread(() -&gt; android.widget.Toast.makeText(this, &quot;Unable to open address book&quot;, android.widget.Toast.LENGTH_SHORT).show());&#10;            finish();&#10;        }&#10;    }&#10;&#10;    private void initViews() {&#10;        // Use defensive findViewById checks to avoid NPE in case layout changes&#10;        View root = findViewById(android.R.id.content);&#10;        if (root == null) {&#10;            // fallback - try direct finds but guard&#10;            rvAddresses = null;&#10;            fabAddAddress = null;&#10;            progressBar = null;&#10;            llEmptyState = null;&#10;            btnBack = null;&#10;            return;&#10;        }&#10;&#10;        rvAddresses = root.findViewById(R.id.rvAddresses);&#10;        fabAddAddress = root.findViewById(R.id.fabAddAddress);&#10;        progressBar = root.findViewById(R.id.progressBar);&#10;        llEmptyState = root.findViewById(R.id.llEmptyState);&#10;        btnBack = root.findViewById(R.id.btnBack);&#10;&#10;        if (btnBack != null) {&#10;            btnBack.setOnClickListener(v -&gt; finish());&#10;        }&#10;        if (fabAddAddress != null) {&#10;            fabAddAddress.setOnClickListener(v -&gt; showAddAddressDialog(null));&#10;        }&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        addressList = new ArrayList&lt;&gt;();&#10;        try {&#10;            addressAdapter = new AddressAdapter(addressList, this::onAddressClick, this::onEditAddress, this::onDeleteAddress);&#10;            if (rvAddresses != null) {&#10;                rvAddresses.setLayoutManager(new LinearLayoutManager(this));&#10;                rvAddresses.setAdapter(addressAdapter);&#10;            } else {&#10;                android.util.Log.w(&quot;AddressBook&quot;, &quot;rvAddresses is null - RecyclerView not initialized&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            android.util.Log.e(&quot;AddressBook&quot;, &quot;Error setting up RecyclerView&quot;, e);&#10;        }&#10;    }&#10;&#10;    private void setVisibilitySafe(View v, int visibility) {&#10;        if (v == null) return;&#10;        try { v.setVisibility(visibility); } catch (Exception e) { android.util.Log.w(&quot;AddressBook&quot;, &quot;Failed to set visibility&quot;, e); }&#10;    }&#10;&#10;    private void loadAddresses() {&#10;        setVisibilitySafe(progressBar, View.VISIBLE);&#10;        setVisibilitySafe(llEmptyState, View.GONE);&#10;        setVisibilitySafe(rvAddresses, View.GONE);&#10;&#10;        if (userId.isEmpty()) {&#10;            setVisibilitySafe(progressBar, View.GONE);&#10;            showEmptyState(&quot;Please login to view addresses&quot;);&#10;            android.util.Log.w(&quot;AddressBook&quot;, &quot;User ID is empty - user not logged in&quot;);&#10;            // Redirect to login&#10;            Toast.makeText(this, &quot;Please login first&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        android.util.Log.d(&quot;AddressBook&quot;, &quot;Loading addresses for userId: &quot; + userId);&#10;&#10;        db.collection(&quot;addresses&quot;)&#10;                .whereEqualTo(&quot;userId&quot;, userId)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    setVisibilitySafe(progressBar, View.GONE);&#10;                    if (addressList != null) addressList.clear();&#10;&#10;                    android.util.Log.d(&quot;AddressBook&quot;, &quot;Query successful. Documents found: &quot; +&#10;                        (queryDocumentSnapshots != null ? queryDocumentSnapshots.size() : 0));&#10;&#10;                    if (queryDocumentSnapshots != null &amp;&amp; !queryDocumentSnapshots.isEmpty()) {&#10;                        for (QueryDocumentSnapshot document : queryDocumentSnapshots) {&#10;                            Address address = document.toObject(Address.class);&#10;                            if (address != null) {&#10;                                if (address.getAddressId() == null || address.getAddressId().isEmpty()) {&#10;                                    address.setAddressId(document.getId());&#10;                                }&#10;                                addressList.add(address);&#10;                            }&#10;                        }&#10;                        setVisibilitySafe(rvAddresses, View.VISIBLE);&#10;                        setVisibilitySafe(llEmptyState, View.GONE);&#10;                        if (addressAdapter != null) addressAdapter.notifyDataSetChanged();&#10;                        android.util.Log.d(&quot;AddressBook&quot;, &quot;Loaded &quot; + addressList.size() + &quot; addresses successfully&quot;);&#10;                    } else {&#10;                        setVisibilitySafe(rvAddresses, View.GONE);&#10;                        showEmptyState(&quot;No Addresses Saved\n\nTap + to add your first address&quot;);&#10;                        android.util.Log.d(&quot;AddressBook&quot;, &quot;No addresses found for this user - showing empty state&quot;);&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    setVisibilitySafe(progressBar, View.GONE);&#10;                    setVisibilitySafe(rvAddresses, View.GONE);&#10;&#10;                    String errorMsg = e.getMessage();&#10;                    android.util.Log.e(&quot;AddressBook&quot;, &quot;Failed to load addresses. Error type: &quot; + e.getClass().getName(), e);&#10;                    android.util.Log.e(&quot;AddressBook&quot;, &quot;Error message: &quot; + errorMsg);&#10;&#10;                    // Check for permission errors&#10;                    if (errorMsg != null &amp;&amp; (errorMsg.contains(&quot;PERMISSION_DENIED&quot;) || errorMsg.contains(&quot;permission&quot;))) {&#10;                        android.util.Log.e(&quot;AddressBook&quot;, &quot;PERMISSION ERROR: Firestore rules need to be updated&quot;);&#10;                        showEmptyState(&quot;Permission Denied\n\nPlease update Firebase Firestore rules to allow address access.\n\nSee FIRESTORE_RULES_DEPLOYMENT.md for instructions.&quot;);&#10;&#10;                        // Show detailed error dialog&#10;                        new AlertDialog.Builder(this)&#10;                                .setTitle(&quot;Firebase Permission Error&quot;)&#10;                                .setMessage(&quot;Your Firestore security rules don't allow access to addresses.\n\n&quot; +&#10;                                           &quot;To fix this:\n&quot; +&#10;                                           &quot;1. Go to Firebase Console\n&quot; +&#10;                                           &quot;2. Open Firestore Database → Rules\n&quot; +&#10;                                           &quot;3. Add rules for 'addresses' collection\n&quot; +&#10;                                           &quot;4. Deploy the rules\n\n&quot; +&#10;                                           &quot;See FIRESTORE_RULES_DEPLOYMENT.md in your project for detailed instructions.&quot;)&#10;                                .setPositiveButton(&quot;OK&quot;, null)&#10;                                .setNegativeButton(&quot;Retry&quot;, (dialog, which) -&gt; loadAddresses())&#10;                                .show();&#10;                    } else if (errorMsg != null &amp;&amp; (errorMsg.contains(&quot;UNAVAILABLE&quot;) || errorMsg.contains(&quot;network&quot;))) {&#10;                        android.util.Log.e(&quot;AddressBook&quot;, &quot;NETWORK ERROR: Check internet connection&quot;);&#10;                        showEmptyState(&quot;Unable to load addresses\n\nPlease check your internet connection&quot;);&#10;                        Toast.makeText(this, &quot;Network error. Please check your connection.&quot;, Toast.LENGTH_LONG).show();&#10;                    } else {&#10;                        showEmptyState(&quot;Unable to load addresses\n\nPlease try again later&quot;);&#10;                        Toast.makeText(this, &quot;Error: &quot; + (errorMsg != null ? errorMsg : &quot;Unknown error&quot;), Toast.LENGTH_LONG).show();&#10;                    }&#10;                });&#10;    }&#10;&#10;    private void updateEmptyState() {&#10;        if (addressList.isEmpty()) {&#10;            rvAddresses.setVisibility(View.GONE);&#10;            showEmptyState(&quot;No Addresses Saved&quot;);&#10;        } else {&#10;            llEmptyState.setVisibility(View.GONE);&#10;            rvAddresses.setVisibility(View.VISIBLE);&#10;        }&#10;    }&#10;&#10;    private void showEmptyState(String message) {&#10;        llEmptyState.setVisibility(View.VISIBLE);&#10;        rvAddresses.setVisibility(View.GONE);&#10;&#10;        // Update the empty state message if the TextView exists&#10;        try {&#10;            TextView tvEmptyMessage = llEmptyState.findViewById(R.id.tvEmptyMessage);&#10;            if (tvEmptyMessage != null) {&#10;                tvEmptyMessage.setText(message);&#10;            }&#10;        } catch (Exception e) {&#10;            // If TextView not found, just show the default empty state&#10;            android.util.Log.e(&quot;AddressBook&quot;, &quot;Empty message TextView not found&quot;, e);&#10;        }&#10;    }&#10;&#10;    private void onAddressClick(Address address) {&#10;        // Show dialog to set as main address&#10;        new AlertDialog.Builder(this)&#10;                .setTitle(&quot;Set Main Address&quot;)&#10;                .setMessage(&quot;Do you want to set this as your main delivery address?&quot;)&#10;                .setPositiveButton(&quot;Yes&quot;, (dialog, which) -&gt; setMainAddress(address))&#10;                .setNegativeButton(&quot;Cancel&quot;, null)&#10;                .show();&#10;    }&#10;&#10;    private void onEditAddress(Address address) {&#10;        showAddAddressDialog(address);&#10;    }&#10;&#10;    private void onDeleteAddress(Address address) {&#10;        new AlertDialog.Builder(this)&#10;                .setTitle(&quot;Delete Address&quot;)&#10;                .setMessage(&quot;Are you sure you want to delete this address?&quot;)&#10;                .setPositiveButton(&quot;Delete&quot;, (dialog, which) -&gt; deleteAddress(address))&#10;                .setNegativeButton(&quot;Cancel&quot;, null)&#10;                .show();&#10;    }&#10;&#10;    private void setMainAddress(Address address) {&#10;        setVisibilitySafe(progressBar, View.VISIBLE);&#10;&#10;        // First, unset all default addresses for this user&#10;        db.collection(&quot;addresses&quot;)&#10;                .whereEqualTo(&quot;userId&quot;, userId)&#10;                .whereEqualTo(&quot;isDefault&quot;, true)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    for (QueryDocumentSnapshot document : queryDocumentSnapshots) {&#10;                        document.getReference().update(&quot;isDefault&quot;, false);&#10;                    }&#10;&#10;                    // Then set the selected address as main/default&#10;                    db.collection(&quot;addresses&quot;)&#10;                            .document(address.getAddressId())&#10;                            .update(&quot;isDefault&quot;, true)&#10;                            .addOnSuccessListener(aVoid -&gt; {&#10;                                setVisibilitySafe(progressBar, View.GONE);&#10;                                Toast.makeText(this, &quot;Main address updated successfully&quot;, Toast.LENGTH_SHORT).show();&#10;                                loadAddresses();&#10;                            })&#10;                            .addOnFailureListener(e -&gt; {&#10;                                setVisibilitySafe(progressBar, View.GONE);&#10;                                Toast.makeText(this, &quot;Failed to update main address&quot;, Toast.LENGTH_SHORT).show();&#10;                            });&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    setVisibilitySafe(progressBar, View.GONE);&#10;                    Toast.makeText(this, &quot;Error updating main address&quot;, Toast.LENGTH_SHORT).show();&#10;                });&#10;    }&#10;&#10;    private void deleteAddress(Address address) {&#10;        db.collection(&quot;addresses&quot;)&#10;                .document(address.getAddressId())&#10;                .delete()&#10;                .addOnSuccessListener(aVoid -&gt; {&#10;                    Toast.makeText(this, &quot;Address deleted&quot;, Toast.LENGTH_SHORT).show();&#10;                    loadAddresses();&#10;                })&#10;                .addOnFailureListener(e -&gt;&#10;                    Toast.makeText(this, &quot;Failed to delete address&quot;, Toast.LENGTH_SHORT).show());&#10;    }&#10;&#10;    private void showAddAddressDialog(Address existingAddress) {&#10;        View dialogView = LayoutInflater.from(this).inflate(R.layout.dialog_add_address, null);&#10;&#10;        EditText etFullName = dialogView.findViewById(R.id.etFullName);&#10;        EditText etPhone = dialogView.findViewById(R.id.etPhone);&#10;        EditText etAddressLine1 = dialogView.findViewById(R.id.etAddressLine1);&#10;        EditText etAddressLine2 = dialogView.findViewById(R.id.etAddressLine2);&#10;        Spinner spCity = dialogView.findViewById(R.id.spCity);&#10;        Spinner spState = dialogView.findViewById(R.id.spState);&#10;        EditText etPincode = dialogView.findViewById(R.id.etPincode);&#10;        RadioGroup rgAddressType = dialogView.findViewById(R.id.rgAddressType);&#10;        Button btnUseCurrent = dialogView.findViewById(R.id.btnUseCurrentAddress);&#10;&#10;        // Populate spinners from string arrays&#10;        ArrayAdapter&lt;CharSequence&gt; cityAdapter = ArrayAdapter.createFromResource(this,&#10;                R.array.india_cities_shortlist, android.R.layout.simple_spinner_item);&#10;        cityAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spCity.setAdapter(cityAdapter);&#10;&#10;        ArrayAdapter&lt;CharSequence&gt; stateAdapter = ArrayAdapter.createFromResource(this,&#10;                R.array.india_states_shortlist, android.R.layout.simple_spinner_item);&#10;        stateAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spState.setAdapter(stateAdapter);&#10;&#10;        if (existingAddress != null) {&#10;            etFullName.setText(existingAddress.getFullName());&#10;            etPhone.setText(existingAddress.getPhoneNumber());&#10;            etAddressLine1.setText(existingAddress.getAddressLine1());&#10;            etAddressLine2.setText(existingAddress.getAddressLine2());&#10;            etPincode.setText(existingAddress.getPincode());&#10;&#10;            // Try to set spinner selections for city and state if present&#10;            try {&#10;                if (existingAddress.getCity() != null) {&#10;                    int pos = cityAdapter.getPosition(existingAddress.getCity());&#10;                    if (pos &gt;= 0) spCity.setSelection(pos);&#10;                }&#10;                if (existingAddress.getState() != null) {&#10;                    int pos = stateAdapter.getPosition(existingAddress.getState());&#10;                    if (pos &gt;= 0) spState.setSelection(pos);&#10;                }&#10;            } catch (Exception e) {&#10;                e.printStackTrace();&#10;            }&#10;&#10;            if (&quot;Work&quot;.equals(existingAddress.getAddressType())) {&#10;                rgAddressType.check(R.id.rbWork);&#10;            } else if (&quot;Other&quot;.equals(existingAddress.getAddressType())) {&#10;                rgAddressType.check(R.id.rbOther);&#10;            }&#10;        }&#10;&#10;        AlertDialog dialog = new AlertDialog.Builder(this)&#10;                .setTitle(existingAddress == null ? &quot;Add Address&quot; : &quot;Edit Address&quot;)&#10;                .setView(dialogView)&#10;                .setPositiveButton(&quot;Save&quot;, null)&#10;                .setNegativeButton(&quot;Cancel&quot;, null)&#10;                .create();&#10;&#10;        // Use current address button handler - FIXED&#10;        btnUseCurrent.setOnClickListener(v -&gt; {&#10;            // Check if location permission is granted&#10;            if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)&#10;                    != PackageManager.PERMISSION_GRANTED) {&#10;                // Request permission&#10;                ActivityCompat.requestPermissions(this,&#10;                    new String[]{Manifest.permission.ACCESS_FINE_LOCATION},&#10;                    REQUEST_LOCATION_PERMISSION);&#10;                Toast.makeText(this, &quot;Please grant location permission and try again&quot;, Toast.LENGTH_LONG).show();&#10;                return;&#10;            }&#10;&#10;            // Show loading state on button&#10;            btnUseCurrent.setEnabled(false);&#10;            btnUseCurrent.setText(&quot;Getting location...&quot;);&#10;&#10;            // First try getLastLocation for quick response&#10;            fusedLocationClient.getLastLocation()&#10;                    .addOnSuccessListener(this, location -&gt; {&#10;                        if (location != null) {&#10;                            // We have a cached location - use it&#10;                            android.util.Log.d(&quot;AddressBook&quot;, &quot;Using cached location: &quot; + location.getLatitude() + &quot;, &quot; + location.getLongitude());&#10;                            fetchAddressFromCoordinates(location.getLatitude(), location.getLongitude(),&#10;                                (formattedAddress, city, state, pincode) -&gt; {&#10;                                runOnUiThread(() -&gt; populateAddressFields(btnUseCurrent, etAddressLine1, etAddressLine2,&#10;                                    spCity, spState, etPincode, cityAdapter, stateAdapter,&#10;                                    formattedAddress, city, state, pincode));&#10;                            });&#10;                        } else {&#10;                            // No cached location - request fresh location&#10;                            android.util.Log.d(&quot;AddressBook&quot;, &quot;No cached location, requesting current location...&quot;);&#10;                            requestCurrentLocation(btnUseCurrent, etAddressLine1, etAddressLine2,&#10;                                spCity, spState, etPincode, cityAdapter, stateAdapter);&#10;                        }&#10;                    })&#10;                    .addOnFailureListener(e -&gt; {&#10;                        android.util.Log.e(&quot;AddressBook&quot;, &quot;getLastLocation failed, trying current location&quot;, e);&#10;                        // If getLastLocation fails, try requesting current location&#10;                        requestCurrentLocation(btnUseCurrent, etAddressLine1, etAddressLine2,&#10;                            spCity, spState, etPincode, cityAdapter, stateAdapter);&#10;                    });&#10;        });&#10;&#10;        dialog.setOnShowListener(dialogInterface -&gt; {&#10;            Button btnSave = dialog.getButton(AlertDialog.BUTTON_POSITIVE);&#10;            btnSave.setOnClickListener(v -&gt; {&#10;                String fullName = etFullName.getText().toString().trim();&#10;                String phone = etPhone.getText().toString().trim();&#10;                String addressLine1 = etAddressLine1.getText().toString().trim();&#10;                String addressLine2 = etAddressLine2.getText().toString().trim();&#10;                String city = spCity.getSelectedItem() != null ? spCity.getSelectedItem().toString().trim() : &quot;&quot;;&#10;                String state = spState.getSelectedItem() != null ? spState.getSelectedItem().toString().trim() : &quot;&quot;;&#10;                String pincode = etPincode.getText().toString().trim();&#10;&#10;                if (fullName.isEmpty() || phone.isEmpty() || addressLine1.isEmpty() ||&#10;                        city.isEmpty() || state.isEmpty() || pincode.isEmpty()) {&#10;                    Toast.makeText(this, &quot;Please fill all required fields&quot;, Toast.LENGTH_SHORT).show();&#10;                    return;&#10;                }&#10;&#10;                // Enforce phone to be exactly 10 numeric digits&#10;                if (!phone.matches(&quot;\\d{10}&quot;)) {&#10;                    etPhone.setError(&quot;Enter a valid 10-digit phone number&quot;);&#10;                    etPhone.requestFocus();&#10;                    return;&#10;                }&#10;&#10;                int selectedTypeId = rgAddressType.getCheckedRadioButtonId();&#10;                String addressType = &quot;Home&quot;;&#10;                if (selectedTypeId == R.id.rbWork) {&#10;                    addressType = &quot;Work&quot;;&#10;                } else if (selectedTypeId == R.id.rbOther) {&#10;                    addressType = &quot;Other&quot;;&#10;                }&#10;&#10;                saveAddress(existingAddress, fullName, phone, addressLine1, addressLine2,&#10;                        city, state, pincode, addressType);&#10;                dialog.dismiss();&#10;            });&#10;        });&#10;&#10;        dialog.show();&#10;    }&#10;&#10;    // Handle permission result for location&#10;    @Override&#10;    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {&#10;        super.onRequestPermissionsResult(requestCode, permissions, grantResults);&#10;        if (requestCode == REQUEST_LOCATION_PERMISSION) {&#10;            if (grantResults.length &gt; 0 &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {&#10;                Toast.makeText(this, &quot;Location permission granted. Tap 'Use Current Address' again.&quot;, Toast.LENGTH_SHORT).show();&#10;            } else {&#10;                Toast.makeText(this, &quot;Location permission denied.&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Reverse-geocode coordinates using Google Geocoding REST API and return formatted address components.&#10;     * This runs network I/O in a background thread and calls callback on completion.&#10;     */&#10;    private void fetchAddressFromCoordinates(double lat, double lng, GeocodeCallback callback) {&#10;        new Thread(() -&gt; {&#10;            String apiKey = getString(R.string.google_maps_api_key);&#10;            if (apiKey == null || apiKey.isEmpty() || apiKey.equals(&quot;YOUR_GOOGLE_MAPS_API_KEY&quot;)) {&#10;                runOnUiThread(() -&gt; Toast.makeText(this, &quot;Google Maps API key not set. Please update strings.xml&quot;, Toast.LENGTH_LONG).show());&#10;                callback.onResult(null, null, null, null);&#10;                return;&#10;            }&#10;&#10;            String urlStr = &quot;https://maps.googleapis.com/maps/api/geocode/json?latlng=&quot; + lat + &quot;,&quot; + lng + &quot;&amp;key=&quot; + apiKey;&#10;            HttpURLConnection conn = null;&#10;            try {&#10;                URL url = new URL(urlStr);&#10;                conn = (HttpURLConnection) url.openConnection();&#10;                conn.setRequestMethod(&quot;GET&quot;);&#10;                conn.setConnectTimeout(15000);&#10;                conn.setReadTimeout(15000);&#10;&#10;                int responseCode = conn.getResponseCode();&#10;                InputStream is = (responseCode == 200) ? conn.getInputStream() : conn.getErrorStream();&#10;                BufferedReader reader = new BufferedReader(new InputStreamReader(is));&#10;                StringBuilder sb = new StringBuilder();&#10;                String line;&#10;                while ((line = reader.readLine()) != null) {&#10;                    sb.append(line);&#10;                }&#10;                reader.close();&#10;&#10;                JSONObject root = new JSONObject(sb.toString());&#10;                JSONArray results = root.optJSONArray(&quot;results&quot;);&#10;                if (results != null &amp;&amp; results.length() &gt; 0) {&#10;                    JSONObject first = results.getJSONObject(0);&#10;                    String formattedAddress = first.optString(&quot;formatted_address&quot;, null);&#10;&#10;                    String city = null;&#10;                    String state = null;&#10;                    String pincode = null;&#10;&#10;                    JSONArray components = first.optJSONArray(&quot;address_components&quot;);&#10;                    if (components != null) {&#10;                        for (int i = 0; i &lt; components.length(); i++) {&#10;                            JSONObject comp = components.getJSONObject(i);&#10;                            JSONArray types = comp.optJSONArray(&quot;types&quot;);&#10;                            if (types != null) {&#10;                                for (int t = 0; t &lt; types.length(); t++) {&#10;                                    String type = types.optString(t);&#10;                                    if (&quot;locality&quot;.equals(type) || &quot;postal_town&quot;.equals(type)) {&#10;                                        city = comp.optString(&quot;long_name&quot;);&#10;                                    } else if (&quot;administrative_area_level_1&quot;.equals(type)) {&#10;                                        state = comp.optString(&quot;long_name&quot;);&#10;                                    } else if (&quot;postal_code&quot;.equals(type)) {&#10;                                        pincode = comp.optString(&quot;long_name&quot;);&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    callback.onResult(formattedAddress, city, state, pincode);&#10;                    return;&#10;                }&#10;&#10;                callback.onResult(null, null, null, null);&#10;            } catch (Exception e) {&#10;                e.printStackTrace();&#10;                callback.onResult(null, null, null, null);&#10;            } finally {&#10;                if (conn != null) conn.disconnect();&#10;            }&#10;        }).start();&#10;    }&#10;&#10;    /**&#10;     * Save a new address or update an existing address in Firestore.&#10;     */&#10;    private void saveAddress(Address existingAddress, String fullName, String phone, String addressLine1,&#10;                             String addressLine2, String city, String state, String pincode, String addressType) {&#10;        if (userId == null || userId.isEmpty()) {&#10;            Toast.makeText(this, &quot;Please login to save address&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        setVisibilitySafe(progressBar, View.VISIBLE);&#10;&#10;        // Build Address object&#10;        Address addr = new Address(userId, fullName, phone, addressLine1, addressLine2, city, state, pincode, addressType);&#10;&#10;        if (existingAddress != null &amp;&amp; existingAddress.getAddressId() != null &amp;&amp; !existingAddress.getAddressId().isEmpty()) {&#10;            // Preserve default flag if present&#10;            addr.setDefault(existingAddress.isDefault());&#10;            addr.setAddressId(existingAddress.getAddressId());&#10;&#10;            db.collection(&quot;addresses&quot;)&#10;                    .document(existingAddress.getAddressId())&#10;                    .set(addr)&#10;                    .addOnSuccessListener(aVoid -&gt; {&#10;                        setVisibilitySafe(progressBar, View.GONE);&#10;                        Toast.makeText(this, &quot;Address updated&quot;, Toast.LENGTH_SHORT).show();&#10;                        loadAddresses();&#10;                    })&#10;                    .addOnFailureListener(e -&gt; {&#10;                        setVisibilitySafe(progressBar, View.GONE);&#10;                        Toast.makeText(this, &quot;Failed to update address: &quot; + e.getMessage(), Toast.LENGTH_LONG).show();&#10;                    });&#10;        } else {&#10;            db.collection(&quot;addresses&quot;)&#10;                    .add(addr)&#10;                    .addOnSuccessListener(documentReference -&gt; {&#10;                        // Optionally store the generated id inside the document for easy lookup&#10;                        String newId = documentReference.getId();&#10;                        documentReference.update(&quot;addressId&quot;, newId);&#10;                        setVisibilitySafe(progressBar, View.GONE);&#10;                        Toast.makeText(this, &quot;Address saved&quot;, Toast.LENGTH_SHORT).show();&#10;                        loadAddresses();&#10;                    })&#10;                    .addOnFailureListener(e -&gt; {&#10;                        setVisibilitySafe(progressBar, View.GONE);&#10;                        Toast.makeText(this, &quot;Failed to save address: &quot; + e.getMessage(), Toast.LENGTH_LONG).show();&#10;                    });&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Request fresh current location using FusedLocationProviderClient&#10;     */&#10;    private void requestCurrentLocation(Button btnUseCurrent, EditText etAddressLine1, EditText etAddressLine2,&#10;                                       Spinner spCity, Spinner spState, EditText etPincode,&#10;                                       ArrayAdapter&lt;CharSequence&gt; cityAdapter, ArrayAdapter&lt;CharSequence&gt; stateAdapter) {&#10;        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {&#10;            runOnUiThread(() -&gt; {&#10;                btnUseCurrent.setEnabled(true);&#10;                btnUseCurrent.setText(&quot;Use Current Address&quot;);&#10;                Toast.makeText(this, &quot;Location permission required&quot;, Toast.LENGTH_SHORT).show();&#10;            });&#10;            return;&#10;        }&#10;&#10;        android.util.Log.d(&quot;AddressBook&quot;, &quot;Requesting current location...&quot;);&#10;&#10;        // Use getCurrentLocation for fresh location (requires Google Play Services)&#10;        com.google.android.gms.location.LocationRequest locationRequest =&#10;            new com.google.android.gms.location.LocationRequest.Builder(&#10;                com.google.android.gms.location.Priority.PRIORITY_HIGH_ACCURACY,&#10;                10000) // 10 seconds&#10;            .setMaxUpdates(1)&#10;            .build();&#10;&#10;        com.google.android.gms.tasks.CancellationTokenSource cancellationTokenSource =&#10;            new com.google.android.gms.tasks.CancellationTokenSource();&#10;&#10;        fusedLocationClient.getCurrentLocation(&#10;            com.google.android.gms.location.Priority.PRIORITY_HIGH_ACCURACY,&#10;            cancellationTokenSource.getToken())&#10;            .addOnSuccessListener(this, location -&gt; {&#10;                if (location != null) {&#10;                    android.util.Log.d(&quot;AddressBook&quot;, &quot;Got fresh location: &quot; + location.getLatitude() + &quot;, &quot; + location.getLongitude());&#10;                    fetchAddressFromCoordinates(location.getLatitude(), location.getLongitude(),&#10;                        (formattedAddress, city, state, pincode) -&gt; {&#10;                        runOnUiThread(() -&gt; populateAddressFields(btnUseCurrent, etAddressLine1, etAddressLine2,&#10;                            spCity, spState, etPincode, cityAdapter, stateAdapter,&#10;                            formattedAddress, city, state, pincode));&#10;                    });&#10;                } else {&#10;                    android.util.Log.e(&quot;AddressBook&quot;, &quot;getCurrentLocation returned null&quot;);&#10;                    runOnUiThread(() -&gt; {&#10;                        btnUseCurrent.setEnabled(true);&#10;                        btnUseCurrent.setText(&quot;Use Current Address&quot;);&#10;                        showLocationUnavailableDialog();&#10;                    });&#10;                }&#10;            })&#10;            .addOnFailureListener(e -&gt; {&#10;                android.util.Log.e(&quot;AddressBook&quot;, &quot;getCurrentLocation failed&quot;, e);&#10;                runOnUiThread(() -&gt; {&#10;                    btnUseCurrent.setEnabled(true);&#10;                    btnUseCurrent.setText(&quot;Use Current Address&quot;);&#10;                    Toast.makeText(this, &quot;Failed to get location: &quot; + e.getMessage(), Toast.LENGTH_LONG).show();&#10;                    showLocationUnavailableDialog();&#10;                });&#10;            });&#10;    }&#10;&#10;    /**&#10;     * Populate address form fields with geocoded data&#10;     */&#10;    private void populateAddressFields(Button btnUseCurrent, EditText etAddressLine1, EditText etAddressLine2,&#10;                                      Spinner spCity, Spinner spState, EditText etPincode,&#10;                                      ArrayAdapter&lt;CharSequence&gt; cityAdapter, ArrayAdapter&lt;CharSequence&gt; stateAdapter,&#10;                                      String formattedAddress, String city, String state, String pincode) {&#10;        // Reset button state&#10;        btnUseCurrent.setEnabled(true);&#10;        btnUseCurrent.setText(&quot;Use Current Address&quot;);&#10;&#10;        if (formattedAddress != null &amp;&amp; !formattedAddress.isEmpty()) {&#10;            android.util.Log.d(&quot;AddressBook&quot;, &quot;Populating fields with: &quot; + formattedAddress);&#10;&#10;            // Parse formatted address into address lines&#10;            String[] addressParts = formattedAddress.split(&quot;,&quot;);&#10;            if (addressParts.length &gt; 0) {&#10;                // First part goes to address line 1&#10;                etAddressLine1.setText(addressParts[0].trim());&#10;&#10;                // Second part (if exists) goes to address line 2&#10;                if (addressParts.length &gt; 1) {&#10;                    etAddressLine2.setText(addressParts[1].trim());&#10;                }&#10;            }&#10;&#10;            // Set city&#10;            if (city != null &amp;&amp; !city.isEmpty()) {&#10;                int cityPos = cityAdapter.getPosition(city);&#10;                if (cityPos &gt;= 0) {&#10;                    spCity.setSelection(cityPos);&#10;                } else {&#10;                    // Try to find partial match&#10;                    for (int i = 0; i &lt; cityAdapter.getCount(); i++) {&#10;                        String item = cityAdapter.getItem(i).toString();&#10;                        if (item.toLowerCase().contains(city.toLowerCase()) ||&#10;                            city.toLowerCase().contains(item.toLowerCase())) {&#10;                            spCity.setSelection(i);&#10;                            break;&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Set state&#10;            if (state != null &amp;&amp; !state.isEmpty()) {&#10;                int statePos = stateAdapter.getPosition(state);&#10;                if (statePos &gt;= 0) {&#10;                    spState.setSelection(statePos);&#10;                } else {&#10;                    // Try to find partial match&#10;                    for (int i = 0; i &lt; stateAdapter.getCount(); i++) {&#10;                        String item = stateAdapter.getItem(i).toString();&#10;                        if (item.toLowerCase().contains(state.toLowerCase()) ||&#10;                            state.toLowerCase().contains(item.toLowerCase())) {&#10;                            spState.setSelection(i);&#10;                            break;&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Set pincode&#10;            if (pincode != null &amp;&amp; !pincode.isEmpty()) {&#10;                etPincode.setText(pincode);&#10;            }&#10;&#10;            Toast.makeText(this, &quot;Address fields populated from current location&quot;,&#10;                Toast.LENGTH_SHORT).show();&#10;        } else {&#10;            android.util.Log.e(&quot;AddressBook&quot;, &quot;Geocoding returned no results&quot;);&#10;            Toast.makeText(this, &quot;Unable to get address details. Please enter manually.&quot;,&#10;                Toast.LENGTH_LONG).show();&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Show helpful dialog when location is unavailable&#10;     */&#10;    private void showLocationUnavailableDialog() {&#10;        new AlertDialog.Builder(this)&#10;            .setTitle(&quot;Location Unavailable&quot;)&#10;            .setMessage(&quot;Unable to get your current location. Please ensure:\n\n&quot; +&#10;                       &quot;1. Location services are enabled in device settings\n&quot; +&#10;                       &quot;2. GPS is turned on\n&quot; +&#10;                       &quot;3. You're in an area with GPS signal\n&quot; +&#10;                       &quot;4. Google Play Services is up to date\n\n&quot; +&#10;                       &quot;You may need to open Google Maps first to get a GPS fix.&quot;)&#10;            .setPositiveButton(&quot;Open Settings&quot;, (dialog, which) -&gt; {&#10;                try {&#10;                    startActivity(new android.content.Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS));&#10;                } catch (Exception e) {&#10;                    Toast.makeText(this, &quot;Unable to open settings&quot;, Toast.LENGTH_SHORT).show();&#10;                }&#10;            })&#10;            .setNegativeButton(&quot;OK&quot;, null)&#10;            .show();&#10;    }&#10;&#10;    private interface GeocodeCallback {&#10;        void onResult(String formattedAddress, String city, String state, String pincode);&#10;    }&#10;&#10;    // Inner Adapter Class&#10;    private static class AddressAdapter extends RecyclerView.Adapter&lt;AddressAdapter.AddressViewHolder&gt; {&#10;        private List&lt;Address&gt; addresses;&#10;        private OnAddressClickListener clickListener;&#10;        private OnAddressEditListener editListener;&#10;        private OnAddressDeleteListener deleteListener;&#10;&#10;        interface OnAddressClickListener {&#10;            void onAddressClick(Address address);&#10;        }&#10;&#10;        interface OnAddressEditListener {&#10;            void onEdit(Address address);&#10;        }&#10;&#10;        interface OnAddressDeleteListener {&#10;            void onDelete(Address address);&#10;        }&#10;&#10;        public AddressAdapter(List&lt;Address&gt; addresses, OnAddressClickListener clickListener,&#10;                            OnAddressEditListener editListener, OnAddressDeleteListener deleteListener) {&#10;            this.addresses = addresses != null ? addresses : new ArrayList&lt;&gt;();&#10;            this.clickListener = clickListener;&#10;            this.editListener = editListener;&#10;            this.deleteListener = deleteListener;&#10;        }&#10;&#10;        @Override&#10;        public AddressViewHolder onCreateViewHolder(android.view.ViewGroup parent, int viewType) {&#10;            View view = LayoutInflater.from(parent.getContext())&#10;                    .inflate(R.layout.item_address, parent, false);&#10;            return new AddressViewHolder(view);&#10;        }&#10;&#10;        @Override&#10;        public void onBindViewHolder(AddressViewHolder holder, int position) {&#10;            if (position &lt; 0 || position &gt;= addresses.size()) return;&#10;            Address address = addresses.get(position);&#10;            holder.bind(address, clickListener, editListener, deleteListener);&#10;        }&#10;&#10;        @Override&#10;        public int getItemCount() {&#10;            return addresses.size();&#10;        }&#10;&#10;        static class AddressViewHolder extends RecyclerView.ViewHolder {&#10;            TextView tvAddressType, tvFullName, tvPhone, tvAddress, tvDefault;&#10;            ImageView btnEdit, btnDelete;&#10;            CardView cardAddress;&#10;&#10;            public AddressViewHolder(View itemView) {&#10;                super(itemView);&#10;                tvAddressType = safeFind(itemView, R.id.tvAddressType);&#10;                tvFullName = safeFind(itemView, R.id.tvFullName);&#10;                tvPhone = safeFind(itemView, R.id.tvPhone);&#10;                tvAddress = safeFind(itemView, R.id.tvAddress);&#10;                tvDefault = safeFind(itemView, R.id.tvDefault);&#10;                btnEdit = safeFind(itemView, R.id.btnEdit);&#10;                btnDelete = safeFind(itemView, R.id.btnDelete);&#10;                cardAddress = safeFind(itemView, R.id.cardAddress);&#10;            }&#10;&#10;            private static &lt;T extends View&gt; T safeFind(View root, int id) {&#10;                try {&#10;                    return root.findViewById(id);&#10;                } catch (Exception e) {&#10;                    android.util.Log.w(&quot;AddressBook&quot;, &quot;Missing view id: &quot; + id, e);&#10;                    return null;&#10;                }&#10;            }&#10;&#10;            public void bind(Address address, OnAddressClickListener clickListener,&#10;                           OnAddressEditListener editListener, OnAddressDeleteListener deleteListener) {&#10;                if (address == null) return;&#10;&#10;                try {&#10;                    if (tvAddressType != null &amp;&amp; address.getAddressType() != null)&#10;                        tvAddressType.setText(address.getAddressType());&#10;                    if (tvFullName != null &amp;&amp; address.getFullName() != null)&#10;                        tvFullName.setText(address.getFullName());&#10;                    if (tvPhone != null &amp;&amp; address.getPhoneNumber() != null)&#10;                        tvPhone.setText(address.getPhoneNumber());&#10;                    if (tvAddress != null)&#10;                        tvAddress.setText(address.getFormattedAddress());&#10;                    if (tvDefault != null)&#10;                        tvDefault.setVisibility(address.isDefault() ? View.VISIBLE : View.GONE);&#10;&#10;                    if (cardAddress != null &amp;&amp; clickListener != null) {&#10;                        cardAddress.setOnClickListener(v -&gt; {&#10;                            try { clickListener.onAddressClick(address); } catch (Exception ignored) {}&#10;                        });&#10;                    }&#10;                    if (btnEdit != null &amp;&amp; editListener != null) {&#10;                        btnEdit.setOnClickListener(v -&gt; {&#10;                            try { editListener.onEdit(address); } catch (Exception ignored) {}&#10;                        });&#10;                    }&#10;                    if (btnDelete != null &amp;&amp; deleteListener != null) {&#10;                        btnDelete.setOnClickListener(v -&gt; {&#10;                            try { deleteListener.onDelete(address); } catch (Exception ignored) {}&#10;                        });&#10;                    }&#10;                } catch (Exception e) {&#10;                    android.util.Log.e(&quot;AddressBook&quot;, &quot;Error binding address view&quot;, e);&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.grocerygo;&#10;&#10;import android.app.AlertDialog;&#10;import android.content.Intent;&#10;import android.os.Bundle;&#10;import android.view.LayoutInflater;&#10;import android.view.View;&#10;import android.widget.Button;&#10;import android.widget.EditText;&#10;import android.widget.ImageView;&#10;import android.widget.LinearLayout;&#10;import android.widget.ProgressBar;&#10;import android.widget.RadioButton;&#10;import android.widget.RadioGroup;&#10;import android.widget.Spinner;&#10;import android.widget.ArrayAdapter;&#10;import android.widget.TextView;&#10;import android.widget.Toast;&#10;&#10;import androidx.annotation.NonNull;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.cardview.widget.CardView;&#10;import androidx.core.app.ActivityCompat;&#10;import androidx.core.content.ContextCompat;&#10;import androidx.recyclerview.widget.LinearLayoutManager;&#10;import androidx.recyclerview.widget.RecyclerView;&#10;&#10;import com.google.android.gms.location.FusedLocationProviderClient;&#10;import com.google.android.gms.location.LocationServices;&#10;import com.google.android.gms.tasks.OnSuccessListener;&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;import com.google.firebase.auth.FirebaseAuth;&#10;import com.google.firebase.firestore.FirebaseFirestore;&#10;import com.google.firebase.firestore.QueryDocumentSnapshot;&#10;import com.grocerygo.app.R;&#10;import com.grocerygo.models.Address;&#10;&#10;import org.json.JSONArray;&#10;import org.json.JSONObject;&#10;&#10;import java.io.BufferedReader;&#10;import java.io.InputStream;&#10;import java.io.InputStreamReader;&#10;import java.net.HttpURLConnection;&#10;import java.net.URL;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;import android.location.Location;&#10;import android.Manifest;&#10;import android.content.pm.PackageManager;&#10;&#10;public class AddressBookActivity extends AppCompatActivity {&#10;    private RecyclerView rvAddresses;&#10;    private AddressAdapter addressAdapter;&#10;    private List&lt;Address&gt; addressList;&#10;    private FloatingActionButton fabAddAddress;&#10;    private ProgressBar progressBar;&#10;    private LinearLayout llEmptyState;&#10;    private ImageView btnBack;&#10;&#10;    private FirebaseFirestore db;&#10;    private FirebaseAuth auth;&#10;    private String userId;&#10;&#10;    // Location client&#10;    private FusedLocationProviderClient fusedLocationClient;&#10;    private static final int REQUEST_LOCATION_PERMISSION = 1001;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        try {&#10;            setContentView(R.layout.activity_address_book);&#10;&#10;            db = FirebaseFirestore.getInstance();&#10;            auth = FirebaseAuth.getInstance();&#10;            userId = auth.getCurrentUser() != null ? auth.getCurrentUser().getUid() : &quot;&quot;;&#10;&#10;            fusedLocationClient = LocationServices.getFusedLocationProviderClient(this);&#10;&#10;            initViews();&#10;            setupRecyclerView();&#10;            loadAddresses();&#10;        } catch (Exception e) {&#10;            // Log and avoid crashing the launcher activity&#10;            android.util.Log.e(&quot;AddressBook&quot;, &quot;Error in onCreate - failing gracefully&quot;, e);&#10;            runOnUiThread(() -&gt; android.widget.Toast.makeText(this, &quot;Unable to open address book&quot;, android.widget.Toast.LENGTH_SHORT).show());&#10;            finish();&#10;        }&#10;    }&#10;&#10;    private void initViews() {&#10;        // Use defensive findViewById checks to avoid NPE in case layout changes&#10;        View root = findViewById(android.R.id.content);&#10;        if (root == null) {&#10;            // fallback - try direct finds but guard&#10;            rvAddresses = null;&#10;            fabAddAddress = null;&#10;            progressBar = null;&#10;            llEmptyState = null;&#10;            btnBack = null;&#10;            return;&#10;        }&#10;&#10;        rvAddresses = root.findViewById(R.id.rvAddresses);&#10;        fabAddAddress = root.findViewById(R.id.fabAddAddress);&#10;        progressBar = root.findViewById(R.id.progressBar);&#10;        llEmptyState = root.findViewById(R.id.llEmptyState);&#10;        btnBack = root.findViewById(R.id.btnBack);&#10;&#10;        if (btnBack != null) {&#10;            btnBack.setOnClickListener(v -&gt; finish());&#10;        }&#10;        if (fabAddAddress != null) {&#10;            fabAddAddress.setOnClickListener(v -&gt; showAddAddressDialog(null));&#10;        }&#10;    }&#10;&#10;    private void setupRecyclerView() {&#10;        addressList = new ArrayList&lt;&gt;();&#10;        try {&#10;            addressAdapter = new AddressAdapter(addressList, this::onAddressClick, this::onEditAddress, this::onDeleteAddress);&#10;            if (rvAddresses != null) {&#10;                rvAddresses.setLayoutManager(new LinearLayoutManager(this));&#10;                rvAddresses.setAdapter(addressAdapter);&#10;            } else {&#10;                android.util.Log.w(&quot;AddressBook&quot;, &quot;rvAddresses is null - RecyclerView not initialized&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            android.util.Log.e(&quot;AddressBook&quot;, &quot;Error setting up RecyclerView&quot;, e);&#10;        }&#10;    }&#10;&#10;    private void setVisibilitySafe(View v, int visibility) {&#10;        if (v == null) return;&#10;        try { v.setVisibility(visibility); } catch (Exception e) { android.util.Log.w(&quot;AddressBook&quot;, &quot;Failed to set visibility&quot;, e); }&#10;    }&#10;&#10;    private void loadAddresses() {&#10;        setVisibilitySafe(progressBar, View.VISIBLE);&#10;        setVisibilitySafe(llEmptyState, View.GONE);&#10;        setVisibilitySafe(rvAddresses, View.GONE);&#10;&#10;        if (userId.isEmpty()) {&#10;            setVisibilitySafe(progressBar, View.GONE);&#10;            showEmptyState(&quot;Please login to view addresses&quot;);&#10;            android.util.Log.w(&quot;AddressBook&quot;, &quot;User ID is empty - user not logged in&quot;);&#10;            // Redirect to login&#10;            Toast.makeText(this, &quot;Please login first&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        android.util.Log.d(&quot;AddressBook&quot;, &quot;Loading addresses for userId: &quot; + userId);&#10;&#10;        db.collection(&quot;addresses&quot;)&#10;                .whereEqualTo(&quot;userId&quot;, userId)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    setVisibilitySafe(progressBar, View.GONE);&#10;                    if (addressList != null) addressList.clear();&#10;&#10;                    android.util.Log.d(&quot;AddressBook&quot;, &quot;Query successful. Documents found: &quot; +&#10;                        (queryDocumentSnapshots != null ? queryDocumentSnapshots.size() : 0));&#10;&#10;                    if (queryDocumentSnapshots != null &amp;&amp; !queryDocumentSnapshots.isEmpty()) {&#10;                        for (QueryDocumentSnapshot document : queryDocumentSnapshots) {&#10;                            Address address = document.toObject(Address.class);&#10;                            if (address != null) {&#10;                                if (address.getAddressId() == null || address.getAddressId().isEmpty()) {&#10;                                    address.setAddressId(document.getId());&#10;                                }&#10;                                addressList.add(address);&#10;                            }&#10;                        }&#10;                        setVisibilitySafe(rvAddresses, View.VISIBLE);&#10;                        setVisibilitySafe(llEmptyState, View.GONE);&#10;                        if (addressAdapter != null) addressAdapter.notifyDataSetChanged();&#10;                        android.util.Log.d(&quot;AddressBook&quot;, &quot;Loaded &quot; + addressList.size() + &quot; addresses successfully&quot;);&#10;                    } else {&#10;                        setVisibilitySafe(rvAddresses, View.GONE);&#10;                        showEmptyState(&quot;No Addresses Saved\n\nTap + to add your first address&quot;);&#10;                        android.util.Log.d(&quot;AddressBook&quot;, &quot;No addresses found for this user - showing empty state&quot;);&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    setVisibilitySafe(progressBar, View.GONE);&#10;                    setVisibilitySafe(rvAddresses, View.GONE);&#10;&#10;                    String errorMsg = e.getMessage();&#10;                    android.util.Log.e(&quot;AddressBook&quot;, &quot;Failed to load addresses. Error type: &quot; + e.getClass().getName(), e);&#10;                    android.util.Log.e(&quot;AddressBook&quot;, &quot;Error message: &quot; + errorMsg);&#10;&#10;                    // Check for permission errors&#10;                    if (errorMsg != null &amp;&amp; (errorMsg.contains(&quot;PERMISSION_DENIED&quot;) || errorMsg.contains(&quot;permission&quot;))) {&#10;                        android.util.Log.e(&quot;AddressBook&quot;, &quot;PERMISSION ERROR: Firestore rules need to be updated&quot;);&#10;                        showEmptyState(&quot;Permission Denied\n\nPlease update Firebase Firestore rules to allow address access.\n\nSee FIRESTORE_RULES_DEPLOYMENT.md for instructions.&quot;);&#10;&#10;                        // Show detailed error dialog&#10;                        new AlertDialog.Builder(this)&#10;                                .setTitle(&quot;Firebase Permission Error&quot;)&#10;                                .setMessage(&quot;Your Firestore security rules don't allow access to addresses.\n\n&quot; +&#10;                                           &quot;To fix this:\n&quot; +&#10;                                           &quot;1. Go to Firebase Console\n&quot; +&#10;                                           &quot;2. Open Firestore Database → Rules\n&quot; +&#10;                                           &quot;3. Add rules for 'addresses' collection\n&quot; +&#10;                                           &quot;4. Deploy the rules\n\n&quot; +&#10;                                           &quot;See FIRESTORE_RULES_DEPLOYMENT.md in your project for detailed instructions.&quot;)&#10;                                .setPositiveButton(&quot;OK&quot;, null)&#10;                                .setNegativeButton(&quot;Retry&quot;, (dialog, which) -&gt; loadAddresses())&#10;                                .show();&#10;                    } else if (errorMsg != null &amp;&amp; (errorMsg.contains(&quot;UNAVAILABLE&quot;) || errorMsg.contains(&quot;network&quot;))) {&#10;                        android.util.Log.e(&quot;AddressBook&quot;, &quot;NETWORK ERROR: Check internet connection&quot;);&#10;                        showEmptyState(&quot;Unable to load addresses\n\nPlease check your internet connection&quot;);&#10;                        Toast.makeText(this, &quot;Network error. Please check your connection.&quot;, Toast.LENGTH_LONG).show();&#10;                    } else {&#10;                        showEmptyState(&quot;Unable to load addresses\n\nPlease try again later&quot;);&#10;                        Toast.makeText(this, &quot;Error: &quot; + (errorMsg != null ? errorMsg : &quot;Unknown error&quot;), Toast.LENGTH_LONG).show();&#10;                    }&#10;                });&#10;    }&#10;&#10;    private void updateEmptyState() {&#10;        if (addressList.isEmpty()) {&#10;            rvAddresses.setVisibility(View.GONE);&#10;            showEmptyState(&quot;No Addresses Saved&quot;);&#10;        } else {&#10;            llEmptyState.setVisibility(View.GONE);&#10;            rvAddresses.setVisibility(View.VISIBLE);&#10;        }&#10;    }&#10;&#10;    private void showEmptyState(String message) {&#10;        llEmptyState.setVisibility(View.VISIBLE);&#10;        rvAddresses.setVisibility(View.GONE);&#10;&#10;        // Update the empty state message if the TextView exists&#10;        try {&#10;            TextView tvEmptyMessage = llEmptyState.findViewById(R.id.tvEmptyMessage);&#10;            if (tvEmptyMessage != null) {&#10;                tvEmptyMessage.setText(message);&#10;            }&#10;        } catch (Exception e) {&#10;            // If TextView not found, just show the default empty state&#10;            android.util.Log.e(&quot;AddressBook&quot;, &quot;Empty message TextView not found&quot;, e);&#10;        }&#10;    }&#10;&#10;    private void onAddressClick(Address address) {&#10;        // Show dialog to set as main address&#10;        new AlertDialog.Builder(this)&#10;                .setTitle(&quot;Set Main Address&quot;)&#10;                .setMessage(&quot;Do you want to set this as your main delivery address?&quot;)&#10;                .setPositiveButton(&quot;Yes&quot;, (dialog, which) -&gt; setMainAddress(address))&#10;                .setNegativeButton(&quot;Cancel&quot;, null)&#10;                .show();&#10;    }&#10;&#10;    private void onEditAddress(Address address) {&#10;        showAddAddressDialog(address);&#10;    }&#10;&#10;    private void onDeleteAddress(Address address) {&#10;        new AlertDialog.Builder(this)&#10;                .setTitle(&quot;Delete Address&quot;)&#10;                .setMessage(&quot;Are you sure you want to delete this address?&quot;)&#10;                .setPositiveButton(&quot;Delete&quot;, (dialog, which) -&gt; deleteAddress(address))&#10;                .setNegativeButton(&quot;Cancel&quot;, null)&#10;                .show();&#10;    }&#10;&#10;    private void setMainAddress(Address address) {&#10;        setVisibilitySafe(progressBar, View.VISIBLE);&#10;&#10;        // First, unset all default addresses for this user&#10;        db.collection(&quot;addresses&quot;)&#10;                .whereEqualTo(&quot;userId&quot;, userId)&#10;                .whereEqualTo(&quot;isDefault&quot;, true)&#10;                .get()&#10;                .addOnSuccessListener(queryDocumentSnapshots -&gt; {&#10;                    for (QueryDocumentSnapshot document : queryDocumentSnapshots) {&#10;                        document.getReference().update(&quot;isDefault&quot;, false);&#10;                    }&#10;&#10;                    // Then set the selected address as main/default&#10;                    db.collection(&quot;addresses&quot;)&#10;                            .document(address.getAddressId())&#10;                            .update(&quot;isDefault&quot;, true)&#10;                            .addOnSuccessListener(aVoid -&gt; {&#10;                                setVisibilitySafe(progressBar, View.GONE);&#10;                                Toast.makeText(this, &quot;Main address updated successfully&quot;, Toast.LENGTH_SHORT).show();&#10;                                loadAddresses();&#10;                            })&#10;                            .addOnFailureListener(e -&gt; {&#10;                                setVisibilitySafe(progressBar, View.GONE);&#10;                                Toast.makeText(this, &quot;Failed to update main address&quot;, Toast.LENGTH_SHORT).show();&#10;                            });&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    setVisibilitySafe(progressBar, View.GONE);&#10;                    Toast.makeText(this, &quot;Error updating main address&quot;, Toast.LENGTH_SHORT).show();&#10;                });&#10;    }&#10;&#10;    private void deleteAddress(Address address) {&#10;        db.collection(&quot;addresses&quot;)&#10;                .document(address.getAddressId())&#10;                .delete()&#10;                .addOnSuccessListener(aVoid -&gt; {&#10;                    Toast.makeText(this, &quot;Address deleted&quot;, Toast.LENGTH_SHORT).show();&#10;                    loadAddresses();&#10;                })&#10;                .addOnFailureListener(e -&gt;&#10;                    Toast.makeText(this, &quot;Failed to delete address&quot;, Toast.LENGTH_SHORT).show());&#10;    }&#10;&#10;    private void showAddAddressDialog(Address existingAddress) {&#10;        View dialogView = LayoutInflater.from(this).inflate(R.layout.dialog_add_address, null);&#10;&#10;        EditText etFullName = dialogView.findViewById(R.id.etFullName);&#10;        EditText etPhone = dialogView.findViewById(R.id.etPhone);&#10;        EditText etAddressLine1 = dialogView.findViewById(R.id.etAddressLine1);&#10;        EditText etAddressLine2 = dialogView.findViewById(R.id.etAddressLine2);&#10;        Spinner spCity = dialogView.findViewById(R.id.spCity);&#10;        Spinner spState = dialogView.findViewById(R.id.spState);&#10;        EditText etPincode = dialogView.findViewById(R.id.etPincode);&#10;        RadioGroup rgAddressType = dialogView.findViewById(R.id.rgAddressType);&#10;        Button btnUseCurrent = dialogView.findViewById(R.id.btnUseCurrentAddress);&#10;&#10;        // Set input type and max length for phone number - ONLY DIGITS, MAX 10&#10;        etPhone.setInputType(android.text.InputType.TYPE_CLASS_NUMBER);&#10;        etPhone.setFilters(new android.text.InputFilter[]{&#10;            new android.text.InputFilter.LengthFilter(10)&#10;        });&#10;        &#10;        // Add text watcher for real-time validation&#10;        etPhone.addTextChangedListener(new android.text.TextWatcher() {&#10;            @Override&#10;            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}&#10;&#10;            @Override&#10;            public void onTextChanged(CharSequence s, int start, int before, int count) {&#10;                // Clear error when user starts typing&#10;                if (s.length() &gt; 0) {&#10;                    etPhone.setError(null);&#10;                }&#10;                &#10;                // Show error if length exceeds 10 (shouldn't happen with filter, but just in case)&#10;                if (s.length() &gt; 10) {&#10;                    etPhone.setError(&quot;Maximum 10 digits allowed&quot;);&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void afterTextChanged(android.text.Editable s) {}&#10;        });&#10;&#10;        // Populate spinners from string arrays&#10;        ArrayAdapter&lt;CharSequence&gt; cityAdapter = ArrayAdapter.createFromResource(this,&#10;                R.array.india_cities_shortlist, android.R.layout.simple_spinner_item);&#10;        cityAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spCity.setAdapter(cityAdapter);&#10;&#10;        ArrayAdapter&lt;CharSequence&gt; stateAdapter = ArrayAdapter.createFromResource(this,&#10;                R.array.india_states_shortlist, android.R.layout.simple_spinner_item);&#10;        stateAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);&#10;        spState.setAdapter(stateAdapter);&#10;&#10;        if (existingAddress != null) {&#10;            etFullName.setText(existingAddress.getFullName());&#10;            etPhone.setText(existingAddress.getPhoneNumber());&#10;            etAddressLine1.setText(existingAddress.getAddressLine1());&#10;            etAddressLine2.setText(existingAddress.getAddressLine2());&#10;            etPincode.setText(existingAddress.getPincode());&#10;&#10;            // Try to set spinner selections for city and state if present&#10;            try {&#10;                if (existingAddress.getCity() != null) {&#10;                    int pos = cityAdapter.getPosition(existingAddress.getCity());&#10;                    if (pos &gt;= 0) spCity.setSelection(pos);&#10;                }&#10;                if (existingAddress.getState() != null) {&#10;                    int pos = stateAdapter.getPosition(existingAddress.getState());&#10;                    if (pos &gt;= 0) spState.setSelection(pos);&#10;                }&#10;            } catch (Exception e) {&#10;                e.printStackTrace();&#10;            }&#10;&#10;            if (&quot;Work&quot;.equals(existingAddress.getAddressType())) {&#10;                rgAddressType.check(R.id.rbWork);&#10;            } else if (&quot;Other&quot;.equals(existingAddress.getAddressType())) {&#10;                rgAddressType.check(R.id.rbOther);&#10;            }&#10;        }&#10;&#10;        AlertDialog dialog = new AlertDialog.Builder(this)&#10;                .setTitle(existingAddress == null ? &quot;Add Address&quot; : &quot;Edit Address&quot;)&#10;                .setView(dialogView)&#10;                .setPositiveButton(&quot;Save&quot;, null)&#10;                .setNegativeButton(&quot;Cancel&quot;, null)&#10;                .create();&#10;&#10;        // Use current address button handler - FIXED&#10;        btnUseCurrent.setOnClickListener(v -&gt; {&#10;            // Check if location permission is granted&#10;            if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION)&#10;                    != PackageManager.PERMISSION_GRANTED) {&#10;                // Request permission&#10;                ActivityCompat.requestPermissions(this,&#10;                    new String[]{Manifest.permission.ACCESS_FINE_LOCATION},&#10;                    REQUEST_LOCATION_PERMISSION);&#10;                Toast.makeText(this, &quot;Please grant location permission and try again&quot;, Toast.LENGTH_LONG).show();&#10;                return;&#10;            }&#10;&#10;            // Show loading state on button&#10;            btnUseCurrent.setEnabled(false);&#10;            btnUseCurrent.setText(&quot;Getting location...&quot;);&#10;&#10;            // First try getLastLocation for quick response&#10;            fusedLocationClient.getLastLocation()&#10;                    .addOnSuccessListener(this, location -&gt; {&#10;                        if (location != null) {&#10;                            // We have a cached location - use it&#10;                            android.util.Log.d(&quot;AddressBook&quot;, &quot;Using cached location: &quot; + location.getLatitude() + &quot;, &quot; + location.getLongitude());&#10;                            fetchAddressFromCoordinates(location.getLatitude(), location.getLongitude(),&#10;                                (formattedAddress, city, state, pincode) -&gt; {&#10;                                runOnUiThread(() -&gt; populateAddressFields(btnUseCurrent, etAddressLine1, etAddressLine2,&#10;                                    spCity, spState, etPincode, cityAdapter, stateAdapter,&#10;                                    formattedAddress, city, state, pincode));&#10;                            });&#10;                        } else {&#10;                            // No cached location - request fresh location&#10;                            android.util.Log.d(&quot;AddressBook&quot;, &quot;No cached location, requesting current location...&quot;);&#10;                            requestCurrentLocation(btnUseCurrent, etAddressLine1, etAddressLine2,&#10;                                spCity, spState, etPincode, cityAdapter, stateAdapter);&#10;                        }&#10;                    })&#10;                    .addOnFailureListener(e -&gt; {&#10;                        android.util.Log.e(&quot;AddressBook&quot;, &quot;getLastLocation failed, trying current location&quot;, e);&#10;                        // If getLastLocation fails, try requesting current location&#10;                        requestCurrentLocation(btnUseCurrent, etAddressLine1, etAddressLine2,&#10;                            spCity, spState, etPincode, cityAdapter, stateAdapter);&#10;                    });&#10;        });&#10;&#10;        dialog.setOnShowListener(dialogInterface -&gt; {&#10;            Button btnSave = dialog.getButton(AlertDialog.BUTTON_POSITIVE);&#10;            btnSave.setOnClickListener(v -&gt; {&#10;                String fullName = etFullName.getText().toString().trim();&#10;                String phone = etPhone.getText().toString().trim();&#10;                String addressLine1 = etAddressLine1.getText().toString().trim();&#10;                String addressLine2 = etAddressLine2.getText().toString().trim();&#10;                String city = spCity.getSelectedItem() != null ? spCity.getSelectedItem().toString().trim() : &quot;&quot;;&#10;                String state = spState.getSelectedItem() != null ? spState.getSelectedItem().toString().trim() : &quot;&quot;;&#10;                String pincode = etPincode.getText().toString().trim();&#10;&#10;                if (fullName.isEmpty() || phone.isEmpty() || addressLine1.isEmpty() ||&#10;                        city.isEmpty() || state.isEmpty() || pincode.isEmpty()) {&#10;                    Toast.makeText(this, &quot;Please fill all required fields&quot;, Toast.LENGTH_SHORT).show();&#10;                    return;&#10;                }&#10;&#10;                // Enforce phone to be exactly 10 numeric digits&#10;                if (!phone.matches(&quot;\\d{10}&quot;)) {&#10;                    etPhone.setError(&quot;Enter a valid 10-digit phone number&quot;);&#10;                    etPhone.requestFocus();&#10;                    return;&#10;                }&#10;&#10;                int selectedTypeId = rgAddressType.getCheckedRadioButtonId();&#10;                String addressType = &quot;Home&quot;;&#10;                if (selectedTypeId == R.id.rbWork) {&#10;                    addressType = &quot;Work&quot;;&#10;                } else if (selectedTypeId == R.id.rbOther) {&#10;                    addressType = &quot;Other&quot;;&#10;                }&#10;&#10;                saveAddress(existingAddress, fullName, phone, addressLine1, addressLine2,&#10;                        city, state, pincode, addressType);&#10;                dialog.dismiss();&#10;            });&#10;        });&#10;&#10;        dialog.show();&#10;    }&#10;&#10;    // Handle permission result for location&#10;    @Override&#10;    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {&#10;        super.onRequestPermissionsResult(requestCode, permissions, grantResults);&#10;        if (requestCode == REQUEST_LOCATION_PERMISSION) {&#10;            if (grantResults.length &gt; 0 &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {&#10;                Toast.makeText(this, &quot;Location permission granted. Tap 'Use Current Address' again.&quot;, Toast.LENGTH_SHORT).show();&#10;            } else {&#10;                Toast.makeText(this, &quot;Location permission denied.&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Reverse-geocode coordinates using Google Geocoding REST API and return formatted address components.&#10;     * This runs network I/O in a background thread and calls callback on completion.&#10;     */&#10;    private void fetchAddressFromCoordinates(double lat, double lng, GeocodeCallback callback) {&#10;        new Thread(() -&gt; {&#10;            String apiKey = getString(R.string.google_maps_api_key);&#10;            if (apiKey == null || apiKey.isEmpty() || apiKey.equals(&quot;YOUR_GOOGLE_MAPS_API_KEY&quot;)) {&#10;                runOnUiThread(() -&gt; Toast.makeText(this, &quot;Google Maps API key not set. Please update strings.xml&quot;, Toast.LENGTH_LONG).show());&#10;                callback.onResult(null, null, null, null);&#10;                return;&#10;            }&#10;&#10;            String urlStr = &quot;https://maps.googleapis.com/maps/api/geocode/json?latlng=&quot; + lat + &quot;,&quot; + lng + &quot;&amp;key=&quot; + apiKey;&#10;            HttpURLConnection conn = null;&#10;            try {&#10;                URL url = new URL(urlStr);&#10;                conn = (HttpURLConnection) url.openConnection();&#10;                conn.setRequestMethod(&quot;GET&quot;);&#10;                conn.setConnectTimeout(15000);&#10;                conn.setReadTimeout(15000);&#10;&#10;                int responseCode = conn.getResponseCode();&#10;                InputStream is = (responseCode == 200) ? conn.getInputStream() : conn.getErrorStream();&#10;                BufferedReader reader = new BufferedReader(new InputStreamReader(is));&#10;                StringBuilder sb = new StringBuilder();&#10;                String line;&#10;                while ((line = reader.readLine()) != null) {&#10;                    sb.append(line);&#10;                }&#10;                reader.close();&#10;&#10;                JSONObject root = new JSONObject(sb.toString());&#10;                JSONArray results = root.optJSONArray(&quot;results&quot;);&#10;                if (results != null &amp;&amp; results.length() &gt; 0) {&#10;                    JSONObject first = results.getJSONObject(0);&#10;                    String formattedAddress = first.optString(&quot;formatted_address&quot;, null);&#10;&#10;                    String city = null;&#10;                    String state = null;&#10;                    String pincode = null;&#10;&#10;                    JSONArray components = first.optJSONArray(&quot;address_components&quot;);&#10;                    if (components != null) {&#10;                        for (int i = 0; i &lt; components.length(); i++) {&#10;                            JSONObject comp = components.getJSONObject(i);&#10;                            JSONArray types = comp.optJSONArray(&quot;types&quot;);&#10;                            if (types != null) {&#10;                                for (int t = 0; t &lt; types.length(); t++) {&#10;                                    String type = types.optString(t);&#10;                                    if (&quot;locality&quot;.equals(type) || &quot;postal_town&quot;.equals(type)) {&#10;                                        city = comp.optString(&quot;long_name&quot;);&#10;                                    } else if (&quot;administrative_area_level_1&quot;.equals(type)) {&#10;                                        state = comp.optString(&quot;long_name&quot;);&#10;                                    } else if (&quot;postal_code&quot;.equals(type)) {&#10;                                        pincode = comp.optString(&quot;long_name&quot;);&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    callback.onResult(formattedAddress, city, state, pincode);&#10;                    return;&#10;                }&#10;&#10;                callback.onResult(null, null, null, null);&#10;            } catch (Exception e) {&#10;                e.printStackTrace();&#10;                callback.onResult(null, null, null, null);&#10;            } finally {&#10;                if (conn != null) conn.disconnect();&#10;            }&#10;        }).start();&#10;    }&#10;&#10;    /**&#10;     * Save a new address or update an existing address in Firestore.&#10;     */&#10;    private void saveAddress(Address existingAddress, String fullName, String phone, String addressLine1,&#10;                             String addressLine2, String city, String state, String pincode, String addressType) {&#10;        if (userId == null || userId.isEmpty()) {&#10;            Toast.makeText(this, &quot;Please login to save address&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;&#10;        setVisibilitySafe(progressBar, View.VISIBLE);&#10;&#10;        // Build Address object&#10;        Address addr = new Address(userId, fullName, phone, addressLine1, addressLine2, city, state, pincode, addressType);&#10;&#10;        if (existingAddress != null &amp;&amp; existingAddress.getAddressId() != null &amp;&amp; !existingAddress.getAddressId().isEmpty()) {&#10;            // Preserve default flag if present&#10;            addr.setDefault(existingAddress.isDefault());&#10;            addr.setAddressId(existingAddress.getAddressId());&#10;&#10;            db.collection(&quot;addresses&quot;)&#10;                    .document(existingAddress.getAddressId())&#10;                    .set(addr)&#10;                    .addOnSuccessListener(aVoid -&gt; {&#10;                        setVisibilitySafe(progressBar, View.GONE);&#10;                        Toast.makeText(this, &quot;Address updated&quot;, Toast.LENGTH_SHORT).show();&#10;                        loadAddresses();&#10;                    })&#10;                    .addOnFailureListener(e -&gt; {&#10;                        setVisibilitySafe(progressBar, View.GONE);&#10;                        Toast.makeText(this, &quot;Failed to update address: &quot; + e.getMessage(), Toast.LENGTH_LONG).show();&#10;                    });&#10;        } else {&#10;            db.collection(&quot;addresses&quot;)&#10;                    .add(addr)&#10;                    .addOnSuccessListener(documentReference -&gt; {&#10;                        // Optionally store the generated id inside the document for easy lookup&#10;                        String newId = documentReference.getId();&#10;                        documentReference.update(&quot;addressId&quot;, newId);&#10;                        setVisibilitySafe(progressBar, View.GONE);&#10;                        Toast.makeText(this, &quot;Address saved&quot;, Toast.LENGTH_SHORT).show();&#10;                        loadAddresses();&#10;                    })&#10;                    .addOnFailureListener(e -&gt; {&#10;                        setVisibilitySafe(progressBar, View.GONE);&#10;                        Toast.makeText(this, &quot;Failed to save address: &quot; + e.getMessage(), Toast.LENGTH_LONG).show();&#10;                    });&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Request fresh current location using FusedLocationProviderClient&#10;     */&#10;    private void requestCurrentLocation(Button btnUseCurrent, EditText etAddressLine1, EditText etAddressLine2,&#10;                                       Spinner spCity, Spinner spState, EditText etPincode,&#10;                                       ArrayAdapter&lt;CharSequence&gt; cityAdapter, ArrayAdapter&lt;CharSequence&gt; stateAdapter) {&#10;        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {&#10;            runOnUiThread(() -&gt; {&#10;                btnUseCurrent.setEnabled(true);&#10;                btnUseCurrent.setText(&quot;Use Current Address&quot;);&#10;                Toast.makeText(this, &quot;Location permission required&quot;, Toast.LENGTH_SHORT).show();&#10;            });&#10;            return;&#10;        }&#10;&#10;        android.util.Log.d(&quot;AddressBook&quot;, &quot;Requesting current location...&quot;);&#10;&#10;        // Use getCurrentLocation for fresh location (requires Google Play Services)&#10;        com.google.android.gms.location.LocationRequest locationRequest =&#10;            new com.google.android.gms.location.LocationRequest.Builder(&#10;                com.google.android.gms.location.Priority.PRIORITY_HIGH_ACCURACY,&#10;                10000) // 10 seconds&#10;            .setMaxUpdates(1)&#10;            .build();&#10;&#10;        com.google.android.gms.tasks.CancellationTokenSource cancellationTokenSource =&#10;            new com.google.android.gms.tasks.CancellationTokenSource();&#10;&#10;        fusedLocationClient.getCurrentLocation(&#10;            com.google.android.gms.location.Priority.PRIORITY_HIGH_ACCURACY,&#10;            cancellationTokenSource.getToken())&#10;            .addOnSuccessListener(this, location -&gt; {&#10;                if (location != null) {&#10;                    android.util.Log.d(&quot;AddressBook&quot;, &quot;Got fresh location: &quot; + location.getLatitude() + &quot;, &quot; + location.getLongitude());&#10;                    fetchAddressFromCoordinates(location.getLatitude(), location.getLongitude(),&#10;                        (formattedAddress, city, state, pincode) -&gt; {&#10;                        runOnUiThread(() -&gt; populateAddressFields(btnUseCurrent, etAddressLine1, etAddressLine2,&#10;                            spCity, spState, etPincode, cityAdapter, stateAdapter,&#10;                            formattedAddress, city, state, pincode));&#10;                    });&#10;                } else {&#10;                    android.util.Log.e(&quot;AddressBook&quot;, &quot;getCurrentLocation returned null&quot;);&#10;                    runOnUiThread(() -&gt; {&#10;                        btnUseCurrent.setEnabled(true);&#10;                        btnUseCurrent.setText(&quot;Use Current Address&quot;);&#10;                        showLocationUnavailableDialog();&#10;                    });&#10;                }&#10;            })&#10;            .addOnFailureListener(e -&gt; {&#10;                android.util.Log.e(&quot;AddressBook&quot;, &quot;getCurrentLocation failed&quot;, e);&#10;                runOnUiThread(() -&gt; {&#10;                    btnUseCurrent.setEnabled(true);&#10;                    btnUseCurrent.setText(&quot;Use Current Address&quot;);&#10;                    Toast.makeText(this, &quot;Failed to get location: &quot; + e.getMessage(), Toast.LENGTH_LONG).show();&#10;                    showLocationUnavailableDialog();&#10;                });&#10;            });&#10;    }&#10;&#10;    /**&#10;     * Populate address form fields with geocoded data&#10;     */&#10;    private void populateAddressFields(Button btnUseCurrent, EditText etAddressLine1, EditText etAddressLine2,&#10;                                      Spinner spCity, Spinner spState, EditText etPincode,&#10;                                      ArrayAdapter&lt;CharSequence&gt; cityAdapter, ArrayAdapter&lt;CharSequence&gt; stateAdapter,&#10;                                      String formattedAddress, String city, String state, String pincode) {&#10;        // Reset button state&#10;        btnUseCurrent.setEnabled(true);&#10;        btnUseCurrent.setText(&quot;Use Current Address&quot;);&#10;&#10;        if (formattedAddress != null &amp;&amp; !formattedAddress.isEmpty()) {&#10;            android.util.Log.d(&quot;AddressBook&quot;, &quot;Populating fields with: &quot; + formattedAddress);&#10;&#10;            // Parse formatted address into address lines&#10;            String[] addressParts = formattedAddress.split(&quot;,&quot;);&#10;            if (addressParts.length &gt; 0) {&#10;                // First part goes to address line 1&#10;                etAddressLine1.setText(addressParts[0].trim());&#10;&#10;                // Second part (if exists) goes to address line 2&#10;                if (addressParts.length &gt; 1) {&#10;                    etAddressLine2.setText(addressParts[1].trim());&#10;                }&#10;            }&#10;&#10;            // Set city&#10;            if (city != null &amp;&amp; !city.isEmpty()) {&#10;                int cityPos = cityAdapter.getPosition(city);&#10;                if (cityPos &gt;= 0) {&#10;                    spCity.setSelection(cityPos);&#10;                } else {&#10;                    // Try to find partial match&#10;                    for (int i = 0; i &lt; cityAdapter.getCount(); i++) {&#10;                        String item = cityAdapter.getItem(i).toString();&#10;                        if (item.toLowerCase().contains(city.toLowerCase()) ||&#10;                            city.toLowerCase().contains(item.toLowerCase())) {&#10;                            spCity.setSelection(i);&#10;                            break;&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Set state&#10;            if (state != null &amp;&amp; !state.isEmpty()) {&#10;                int statePos = stateAdapter.getPosition(state);&#10;                if (statePos &gt;= 0) {&#10;                    spState.setSelection(statePos);&#10;                } else {&#10;                    // Try to find partial match&#10;                    for (int i = 0; i &lt; stateAdapter.getCount(); i++) {&#10;                        String item = stateAdapter.getItem(i).toString();&#10;                        if (item.toLowerCase().contains(state.toLowerCase()) ||&#10;                            state.toLowerCase().contains(item.toLowerCase())) {&#10;                            spState.setSelection(i);&#10;                            break;&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Set pincode&#10;            if (pincode != null &amp;&amp; !pincode.isEmpty()) {&#10;                etPincode.setText(pincode);&#10;            }&#10;&#10;            Toast.makeText(this, &quot;Address fields populated from current location&quot;,&#10;                Toast.LENGTH_SHORT).show();&#10;        } else {&#10;            android.util.Log.e(&quot;AddressBook&quot;, &quot;Geocoding returned no results&quot;);&#10;            Toast.makeText(this, &quot;Unable to get address details. Please enter manually.&quot;,&#10;                Toast.LENGTH_LONG).show();&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Show helpful dialog when location is unavailable&#10;     */&#10;    private void showLocationUnavailableDialog() {&#10;        new AlertDialog.Builder(this)&#10;            .setTitle(&quot;Location Unavailable&quot;)&#10;            .setMessage(&quot;Unable to get your current location. Please ensure:\n\n&quot; +&#10;                       &quot;1. Location services are enabled in device settings\n&quot; +&#10;                       &quot;2. GPS is turned on\n&quot; +&#10;                       &quot;3. You're in an area with GPS signal\n&quot; +&#10;                       &quot;4. Google Play Services is up to date\n\n&quot; +&#10;                       &quot;You may need to open Google Maps first to get a GPS fix.&quot;)&#10;            .setPositiveButton(&quot;Open Settings&quot;, (dialog, which) -&gt; {&#10;                try {&#10;                    startActivity(new android.content.Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS));&#10;                } catch (Exception e) {&#10;                    Toast.makeText(this, &quot;Unable to open settings&quot;, Toast.LENGTH_SHORT).show();&#10;                }&#10;            })&#10;            .setNegativeButton(&quot;OK&quot;, null)&#10;            .show();&#10;    }&#10;&#10;    private interface GeocodeCallback {&#10;        void onResult(String formattedAddress, String city, String state, String pincode);&#10;    }&#10;&#10;    // Inner Adapter Class&#10;    private static class AddressAdapter extends RecyclerView.Adapter&lt;AddressAdapter.AddressViewHolder&gt; {&#10;        private List&lt;Address&gt; addresses;&#10;        private OnAddressClickListener clickListener;&#10;        private OnAddressEditListener editListener;&#10;        private OnAddressDeleteListener deleteListener;&#10;&#10;        interface OnAddressClickListener {&#10;            void onAddressClick(Address address);&#10;        }&#10;&#10;        interface OnAddressEditListener {&#10;            void onEdit(Address address);&#10;        }&#10;&#10;        interface OnAddressDeleteListener {&#10;            void onDelete(Address address);&#10;        }&#10;&#10;        public AddressAdapter(List&lt;Address&gt; addresses, OnAddressClickListener clickListener,&#10;                            OnAddressEditListener editListener, OnAddressDeleteListener deleteListener) {&#10;            this.addresses = addresses != null ? addresses : new ArrayList&lt;&gt;();&#10;            this.clickListener = clickListener;&#10;            this.editListener = editListener;&#10;            this.deleteListener = deleteListener;&#10;        }&#10;&#10;        @Override&#10;        public AddressViewHolder onCreateViewHolder(android.view.ViewGroup parent, int viewType) {&#10;            View view = LayoutInflater.from(parent.getContext())&#10;                    .inflate(R.layout.item_address, parent, false);&#10;            return new AddressViewHolder(view);&#10;        }&#10;&#10;        @Override&#10;        public void onBindViewHolder(AddressViewHolder holder, int position) {&#10;            if (position &lt; 0 || position &gt;= addresses.size()) return;&#10;            Address address = addresses.get(position);&#10;            holder.bind(address, clickListener, editListener, deleteListener);&#10;        }&#10;&#10;        @Override&#10;        public int getItemCount() {&#10;            return addresses.size();&#10;        }&#10;&#10;        static class AddressViewHolder extends RecyclerView.ViewHolder {&#10;            TextView tvAddressType, tvFullName, tvPhone, tvAddress, tvDefault;&#10;            ImageView btnEdit, btnDelete;&#10;            CardView cardAddress;&#10;&#10;            public AddressViewHolder(View itemView) {&#10;                super(itemView);&#10;                tvAddressType = safeFind(itemView, R.id.tvAddressType);&#10;                tvFullName = safeFind(itemView, R.id.tvFullName);&#10;                tvPhone = safeFind(itemView, R.id.tvPhone);&#10;                tvAddress = safeFind(itemView, R.id.tvAddress);&#10;                tvDefault = safeFind(itemView, R.id.tvDefault);&#10;                btnEdit = safeFind(itemView, R.id.btnEdit);&#10;                btnDelete = safeFind(itemView, R.id.btnDelete);&#10;                cardAddress = safeFind(itemView, R.id.cardAddress);&#10;            }&#10;&#10;            private static &lt;T extends View&gt; T safeFind(View root, int id) {&#10;                try {&#10;                    return root.findViewById(id);&#10;                } catch (Exception e) {&#10;                    android.util.Log.w(&quot;AddressBook&quot;, &quot;Missing view id: &quot; + id, e);&#10;                    return null;&#10;                }&#10;            }&#10;&#10;            public void bind(Address address, OnAddressClickListener clickListener,&#10;                           OnAddressEditListener editListener, OnAddressDeleteListener deleteListener) {&#10;                if (address == null) return;&#10;&#10;                try {&#10;                    if (tvAddressType != null &amp;&amp; address.getAddressType() != null)&#10;                        tvAddressType.setText(address.getAddressType());&#10;                    if (tvFullName != null &amp;&amp; address.getFullName() != null)&#10;                        tvFullName.setText(address.getFullName());&#10;                    if (tvPhone != null &amp;&amp; address.getPhoneNumber() != null)&#10;                        tvPhone.setText(address.getPhoneNumber());&#10;                    if (tvAddress != null)&#10;                        tvAddress.setText(address.getFormattedAddress());&#10;                    if (tvDefault != null)&#10;                        tvDefault.setVisibility(address.isDefault() ? View.VISIBLE : View.GONE);&#10;&#10;                    if (cardAddress != null &amp;&amp; clickListener != null) {&#10;                        cardAddress.setOnClickListener(v -&gt; {&#10;                            try { clickListener.onAddressClick(address); } catch (Exception ignored) {}&#10;                        });&#10;                    }&#10;                    if (btnEdit != null &amp;&amp; editListener != null) {&#10;                        btnEdit.setOnClickListener(v -&gt; {&#10;                            try { editListener.onEdit(address); } catch (Exception ignored) {}&#10;                        });&#10;                    }&#10;                    if (btnDelete != null &amp;&amp; deleteListener != null) {&#10;                        btnDelete.setOnClickListener(v -&gt; {&#10;                            try { deleteListener.onDelete(address); } catch (Exception ignored) {}&#10;                        });&#10;                    }&#10;                } catch (Exception e) {&#10;                    android.util.Log.e(&quot;AddressBook&quot;, &quot;Error binding address view&quot;, e);&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>